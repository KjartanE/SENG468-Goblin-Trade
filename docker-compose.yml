version: "3"
services:
  frontend:
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    deploy:
      replicas: 1
    ports:
      - "3000"
    environment:
      - REACT_APP_BACKEND_HOST=${BACKEND_HOST}
    networks:
      - loadbalancing
    volumes:
      - ./frontend/:/frontend/dev
      - /frontend/dev/node_modules/

  backend:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    deploy:
      replicas: 1
    ports:
      - "4000"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_ADMIN=${DB_ADMIN}
      - DB_ADMIN_PASS=${DB_ADMIN_PASS}
      - DB_DATABASE=${DB_DATABASE}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
    networks:
      - loadbalancing
    volumes:
      - ./backend/:/backend/dev
      - /backend/dev/node_modules/
    depends_on:
      rabbitmq:
        condition: service_healthy
    links:
      - rabbitmq

  order_handler:
    restart: always
    build:
      context: ./order_handler
      dockerfile: Dockerfile
    ports:
      - "5000"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_ADMIN=${DB_ADMIN}
      - DB_ADMIN_PASS=${DB_ADMIN_PASS}
      - DB_DATABASE=${DB_DATABASE}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
    networks:
      - loadbalancing
    volumes:
      - ./order_handler/:/order_handler/dev
      - /order_handler/dev/node_modules/
    depends_on:
      rabbitmq:
        condition: service_healthy
    links:
      - rabbitmq

  database:
    build: ./database
    ports:
      - "27017:27017"
    networks:
      - loadbalancing

  rabbitmq:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - rabbitmq_go_net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 25

  matching_engine:
    build:
      context: ./matching_engine
      dockerfile: Dockerfile
    ports:
      - "7000"
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - MATCHING_ENGINE_HOST=${MATCHING_ENGINE_HOST}
      - MATCHING_ENGINE_PORT=${MATCHING_ENGINE_PORT}
    networks:
      - loadbalancing
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    links:
      - rabbitmq

  nginx:
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "9000:80"
    depends_on:
      - frontend
      - backend
      - matching_engine
      - order_handler
    networks:
      - loadbalancing

networks:
  loadbalancing:

  rabbitmq_go_net:
    driver: bridge

volumes:
  db_data:
